From d499b95f96b40c7a33ece2ca2a0802a98fd31338 Mon Sep 17 00:00:00 2001
From: Syed Abdul Mannan <syedabdulmannan95@gmail.com>
Date: Sun, 31 May 2020 13:40:39 +0530
Subject: [PATCH] Create Patch File

---
 src/App.tsx   | 19 ++++++++++++++++---
 src/Graph.tsx | 22 ++++++++++++++++++----
 2 files changed, 34 insertions(+), 7 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..e7885c5 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph:false,
     };
   }
 
@@ -29,19 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if(this.state.showGraph){
     return (<Graph data={this.state.data}/>)
   }
-
+  }
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+    let x=0;
+    const interval=setInterval(()=>{
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({
+         data: serverResponds,
+        showGraph:true,
+       });
     });
-  }
+    x++;
+    if(x>1000){
+      clearInterval(interval);
+    }
+  },100);
+}
 
   /**
    * Render the App react component
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..d1b71dd 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,8 +32,8 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+    //const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+      const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
@@ -44,17 +44,31 @@ class Graph extends Component<IProps, {}> {
     if (window.perspective && window.perspective.worker()) {
       this.table = window.perspective.worker().table(schema);
     }
+  
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+     
+      elem.setAttribute('aggregates','{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
     }
+    
   }
+  
+ 
+      
 
   componentDidUpdate() {
+
     // Everytime the data props is updated, insert the data into Perspective table
-    if (this.table) {
+    if (this.table) {  
+      
+     
       // As part of the task, you need to fix the way we update the data props to
       // avoid inserting duplicated entries into Perspective table again.
       this.table.update(this.props.data.map((el: any) => {
-- 
2.26.2.windows.1

